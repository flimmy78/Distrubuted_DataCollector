#pragma once
/**********************************************************************************************

**********************************************************************************************/
#define PROTOCAL_INTERFACE class
#if defined(WIN32)
#define __PROTOCAL_INTERFACE_API __declspec(dllexport)
#else
#define __PROTOCAL_INTERFACE_API
#endif

namespace WSProtocalInterFace
{
#if defined(WIN32) || defined(WIN64)
	//
	// Windows/Visual C++
	//
	typedef signed char            Int8;
	typedef unsigned char          UInt8;
	typedef signed short           Int16;
	typedef unsigned short         UInt16;
	typedef int					   Int32;
	typedef unsigned int           UInt32;
	typedef signed __int64         Int64;
	typedef unsigned __int64       UInt64;
#else
	//
	// Unix/GCC
	//
	typedef signed char            Int8;
	typedef unsigned char          UInt8;
	typedef signed short           Int16;
	typedef unsigned short         UInt16;
	typedef int					   Int32;
	typedef unsigned int           UInt32;
	typedef signed long            IntPtr;
	typedef signed long long	   Int64;
	typedef unsigned long long	   UInt64;
#endif

	PROTOCAL_INTERFACE IProtocalObject
	{
	public:
		
		virtual bool InitObject() = 0;

		/*	根据协议类型封包

			@ pData: 对应tagTASKPacket结构体

			@ ret：成功：1 失败：0

			注：通过pData->szRecvData来解码。解码后的中间数据存入pData->szReturnData

			有连续帧收发的时候通过中间帧来继续进行编码。
		*/
		virtual bool EncodePacket(void* pTask) = 0;

		/* 解码。
			
			@ pData ：tagTask除了设备返回的数据外，还要包含终端的SN码，表计的SN码，任务的SN码

			@ ret：成功：1 失败：0

			注：通过pData->szRecvData来解码。解码后的中间数据存入pData->szSendData
			
			pData->szReturnData存入最终的结果数据。有连续帧收发的时候才需要保存中间帧。
		*/
		virtual bool DecodePacket(void* pData, UInt32 nDataLen, void* pTask) = 0;

	};
	
};

extern "C"
{
	__PROTOCAL_INTERFACE_API bool CreateProtocalObject(WSProtocalInterFace::IProtocalObject** pProtocalObject);
}